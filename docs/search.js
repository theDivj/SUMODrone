window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "drClass", "modulename": "drClass", "kind": "module", "doc": "<p>Module initiating SUMO Traci code implementing Drone based charging of EVs in motion</p>\n"}, {"fullname": "drClass.drClass", "modulename": "drClass", "qualname": "drClass", "kind": "class", "doc": "<p>Wrapper class to setup and execute simulation</p>\n"}, {"fullname": "drClass.drClass.briefStatistics", "modulename": "drClass", "qualname": "drClass.briefStatistics", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "drClass.drClass.maxEvs", "modulename": "drClass", "qualname": "drClass.maxEvs", "kind": "variable", "doc": "<p></p>\n", "default_value": "9223372036854775807"}, {"fullname": "drClass.drClass.sumoCmd", "modulename": "drClass", "qualname": "drClass.sumoCmd", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "drClass.drClass.runstring", "modulename": "drClass", "qualname": "drClass.runstring", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "drClass.drClass.loop", "modulename": "drClass", "qualname": "drClass.loop", "kind": "function", "doc": "<p>main simulation loop</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "drClass.drClass.parseRunstring", "modulename": "drClass", "qualname": "drClass.parseRunstring", "kind": "function", "doc": "<p>use argparse to parse runstring and set our variables</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parser</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">argparse</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "drClass.drClass.getVersion", "modulename": "drClass", "qualname": "drClass.getVersion", "kind": "function", "doc": "<p>fudge to extract version from a C++ header file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "drClass.main", "modulename": "drClass", "qualname": "main", "kind": "function", "doc": "<p>Instantiate!</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre", "modulename": "ControlCentre", "kind": "module", "doc": "<p>Module managing allocation of Drones to EVs and control (parking, charging) of Drones when not assigned to EVs</p>\n"}, {"fullname": "ControlCentre.ControlCentre", "modulename": "ControlCentre", "qualname": "ControlCentre", "kind": "class", "doc": "<p>Main class receiving requests from EV's and notifications from Drones and EV's when charge completes or Drone is out of battery</p>\n"}, {"fullname": "ControlCentre.ControlCentre.__init__", "modulename": "ControlCentre", "qualname": "ControlCentre.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">wEnergy</span>,</span><span class=\"param\">\t<span class=\"n\">wUrgency</span>,</span><span class=\"param\">\t<span class=\"n\">proximityRadius</span>,</span><span class=\"param\">\t<span class=\"n\">maxDrones</span>,</span><span class=\"param\">\t<span class=\"n\">fullChargeTolerance</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">globalCharge</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">droneType</span><span class=\"o\">=</span><span class=\"s1\">&#39;ehang184&#39;</span></span>)</span>"}, {"fullname": "ControlCentre.ControlCentre.wEnergy", "modulename": "ControlCentre", "qualname": "ControlCentre.wEnergy", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.wUrgency", "modulename": "ControlCentre", "qualname": "ControlCentre.wUrgency", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.proximityRadius", "modulename": "ControlCentre", "qualname": "ControlCentre.proximityRadius", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.maxDrones", "modulename": "ControlCentre", "qualname": "ControlCentre.maxDrones", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.fullChargeTolerance", "modulename": "ControlCentre", "qualname": "ControlCentre.fullChargeTolerance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.globalCharge", "modulename": "ControlCentre", "qualname": "ControlCentre.globalCharge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.requests", "modulename": "ControlCentre", "qualname": "ControlCentre.requests", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.allocatedEV", "modulename": "ControlCentre", "qualname": "ControlCentre.allocatedEV", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.startChargeEV", "modulename": "ControlCentre", "qualname": "ControlCentre.startChargeEV", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.allocatedDrone", "modulename": "ControlCentre", "qualname": "ControlCentre.allocatedDrone", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.freeDrones", "modulename": "ControlCentre", "qualname": "ControlCentre.freeDrones", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.needChargeDrones", "modulename": "ControlCentre", "qualname": "ControlCentre.needChargeDrones", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.droneType", "modulename": "ControlCentre", "qualname": "ControlCentre.droneType", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.spawnedDrones", "modulename": "ControlCentre", "qualname": "ControlCentre.spawnedDrones", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.insertedDummies", "modulename": "ControlCentre", "qualname": "ControlCentre.insertedDummies", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.misMatch", "modulename": "ControlCentre", "qualname": "ControlCentre.misMatch", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.allocatedCount", "modulename": "ControlCentre", "qualname": "ControlCentre.allocatedCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "ControlCentre.ControlCentre.allocate", "modulename": "ControlCentre", "qualname": "ControlCentre.allocate", "kind": "function", "doc": "<p>Set up the mapping between drone and ev</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">drone</span>, </span><span class=\"param\"><span class=\"n\">ev</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.allocateDrones", "modulename": "ControlCentre", "qualname": "ControlCentre.allocateDrones", "kind": "function", "doc": "<p>Allocate whatever drones we have free/viable in order of urgency,\nif more than one drone available assign the nearest</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">urgencyList</span>, </span><span class=\"param\"><span class=\"n\">urgencyPosition</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.calcUrgency", "modulename": "ControlCentre", "qualname": "ControlCentre.calcUrgency", "kind": "function", "doc": "<p>urgency defined as distance to nearest hub/distance ev can travel on charge.\ncreates a list of ev's that want charge, have not been allocated a drone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.chargeCanComplete", "modulename": "ControlCentre", "qualname": "ControlCentre.chargeCanComplete", "kind": "function", "doc": "<p>Estimate whether there will be time for the charge to complete</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ev</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.findEdgePos", "modulename": "ControlCentre", "qualname": "ControlCentre.findEdgePos", "kind": "function", "doc": "<p>work out the edge and position of the EV, when it is deltaPos metres along the route from the current position\nto give us an approximation to the rendezvous position</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">evID</span>, </span><span class=\"param\"><span class=\"n\">deltaPos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.findRendezvousXY", "modulename": "ControlCentre", "qualname": "ControlCentre.findRendezvousXY", "kind": "function", "doc": "<p>estimate a direct rendezvous point for the drone/vehicle - assumes constant vehicle speed\n   apply a factor of 90% to allow for acceleration/deceleration/% of time not at allowed speed\nalgorithm from <a href=\"https://www.codeproject.com/Articles/990452/Interception-of-Two-Moving-Objects-in-D-Space\">https://www.codeproject.com/Articles/990452/Interception-of-Two-Moving-Objects-in-D-Space</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ev</span>, </span><span class=\"param\"><span class=\"n\">drone</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.getNeighboursNeedingCharge", "modulename": "ControlCentre", "qualname": "ControlCentre.getNeighboursNeedingCharge", "kind": "function", "doc": "<p>find all the ev's that are requesting a charge and compute the mean distance to these\nnote calling math.dist which will use sqrt is actually faster than comparing distances to the square\nwe only update the ev positions on first call because we will repeat call to this fn for each ev in creating urgency list</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ev</span>, </span><span class=\"param\"><span class=\"n\">firstCall</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.notifyDroneState", "modulename": "ControlCentre", "qualname": "ControlCentre.notifyDroneState", "kind": "function", "doc": "<p>Notification from Drone when charging finished or Drone has broken off the charge/flight</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">drone</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.notifyEVState", "modulename": "ControlCentre", "qualname": "ControlCentre.notifyEVState", "kind": "function", "doc": "<p>Notification from EV - when EV has left simulation (or completed charge)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ev</span>, </span><span class=\"param\"><span class=\"n\">evState</span>, </span><span class=\"param\"><span class=\"n\">drone</span>, </span><span class=\"param\"><span class=\"n\">capacity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.printDroneStatistics", "modulename": "ControlCentre", "qualname": "ControlCentre.printDroneStatistics", "kind": "function", "doc": "<p>Print out Drone and EV statistics for the complete run</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">brief</span>, </span><span class=\"param\"><span class=\"n\">version</span>, </span><span class=\"param\"><span class=\"n\">runstring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.requestCharge", "modulename": "ControlCentre", "qualname": "ControlCentre.requestCharge", "kind": "function", "doc": "<p>request for charge from EV</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ev</span>, </span><span class=\"param\"><span class=\"n\">capacity</span>, </span><span class=\"param\"><span class=\"n\">requestedWh</span><span class=\"o\">=</span><span class=\"mf\">2000.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.setMaxDrones", "modulename": "ControlCentre", "qualname": "ControlCentre.setMaxDrones", "kind": "function", "doc": "<p>update maxDrones - when --z option is used drones are limited to those in the add file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pmaxDrones</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.syncSpawnedDrones", "modulename": "ControlCentre", "qualname": "ControlCentre.syncSpawnedDrones", "kind": "function", "doc": "<p>if we've generated drones from POI definitions in the add file we need to update our spawnedDrone count</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.tidyDrones", "modulename": "ControlCentre", "qualname": "ControlCentre.tidyDrones", "kind": "function", "doc": "<p>remove any dummy vehicles left after all vehicles have left - ie simulation has finished</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ControlCentre.ControlCentre.update", "modulename": "ControlCentre", "qualname": "ControlCentre.update", "kind": "function", "doc": "<p>Management of 'control centre' executed by simulation on every step</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Simulation", "modulename": "Simulation", "kind": "module", "doc": "<p>Module implementing the SUMO simulation loop</p>\n"}, {"fullname": "Simulation.Simulation", "modulename": "Simulation", "qualname": "Simulation", "kind": "class", "doc": "<p>Class executing the simulation loop - tracks the timeStep</p>\n"}, {"fullname": "Simulation.Simulation.__init__", "modulename": "Simulation", "qualname": "Simulation.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sumoCmd</span>, </span><span class=\"param\"><span class=\"n\">maxEVs</span></span>)</span>"}, {"fullname": "Simulation.Simulation.maxEVs", "modulename": "Simulation", "qualname": "Simulation.maxEVs", "kind": "variable", "doc": "<p></p>\n", "default_value": "9223372036854775807"}, {"fullname": "Simulation.Simulation.stepSecs", "modulename": "Simulation", "qualname": "Simulation.stepSecs", "kind": "variable", "doc": "<p></p>\n", "default_value": "1.0"}, {"fullname": "Simulation.Simulation.useChargeHubs", "modulename": "Simulation", "qualname": "Simulation.useChargeHubs", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "Simulation.Simulation.timeStep", "modulename": "Simulation", "qualname": "Simulation.timeStep", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "Simulation.Simulation.EVs", "modulename": "Simulation", "qualname": "Simulation.EVs", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "Simulation.Simulation.poiDrones", "modulename": "Simulation", "qualname": "Simulation.poiDrones", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "Simulation.Simulation.usingSumoGui", "modulename": "Simulation", "qualname": "Simulation.usingSumoGui", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "Simulation.Simulation.step", "modulename": "Simulation", "qualname": "Simulation.step", "kind": "function", "doc": "<p>Simulation step</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Simulation.Simulation.setMaxEvs", "modulename": "Simulation", "qualname": "Simulation.setMaxEvs", "kind": "function", "doc": "<p>set a limit to the number of EVs we handle - default is no limit</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pmaxEVs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EV", "modulename": "EV", "kind": "module", "doc": "<p>Electric Vehicle classes</p>\n"}, {"fullname": "EV.EV", "modulename": "EV", "qualname": "EV", "kind": "class", "doc": "<p>Class shadowing EVs in the simulation ie SUMO controls the drone movement - basically just a state model</p>\n\n<ul>\n<li>note myPosition is only set (ie valid) in states where we are interacting with a drone\nalso the -e option puts a limit on the no of EVs that are shadowed</li>\n</ul>\n"}, {"fullname": "EV.EV.__init__", "modulename": "EV", "qualname": "EV.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">evID</span>, </span><span class=\"param\"><span class=\"n\">kmPerWh</span><span class=\"o\">=</span><span class=\"mf\">0.0</span></span>)</span>"}, {"fullname": "EV.EV.EVState", "modulename": "EV", "qualname": "EV.EVState", "kind": "class", "doc": "<p>enumeration of EV state model</p>\n", "bases": "enum.Enum"}, {"fullname": "EV.EV.EVState.DRIVING", "modulename": "EV", "qualname": "EV.EVState.DRIVING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVState.DRIVING: 1&gt;"}, {"fullname": "EV.EV.EVState.CHARGEREQUESTED", "modulename": "EV", "qualname": "EV.EVState.CHARGEREQUESTED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVState.CHARGEREQUESTED: 2&gt;"}, {"fullname": "EV.EV.EVState.WAITINGFORRENDEZVOUS", "modulename": "EV", "qualname": "EV.EVState.WAITINGFORRENDEZVOUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVState.WAITINGFORRENDEZVOUS: 3&gt;"}, {"fullname": "EV.EV.EVState.WAITINGFORDRONE", "modulename": "EV", "qualname": "EV.EVState.WAITINGFORDRONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVState.WAITINGFORDRONE: 4&gt;"}, {"fullname": "EV.EV.EVState.CHARGINGFROMDRONE", "modulename": "EV", "qualname": "EV.EVState.CHARGINGFROMDRONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVState.CHARGINGFROMDRONE: 5&gt;"}, {"fullname": "EV.EV.EVState.CHARGEBROKENOFF", "modulename": "EV", "qualname": "EV.EVState.CHARGEBROKENOFF", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVState.CHARGEBROKENOFF: 6&gt;"}, {"fullname": "EV.EV.EVState.LEFTSIMULATION", "modulename": "EV", "qualname": "EV.EVState.LEFTSIMULATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVState.LEFTSIMULATION: 7&gt;"}, {"fullname": "EV.EV.EVState.NULL", "modulename": "EV", "qualname": "EV.EVState.NULL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EVState.NULL: 8&gt;"}, {"fullname": "EV.EV.chargeNeededThreshold", "modulename": "EV", "qualname": "EV.chargeNeededThreshold", "kind": "variable", "doc": "<p></p>\n", "default_value": "30000.0"}, {"fullname": "EV.EV.chargeDoneThreshold", "modulename": "EV", "qualname": "EV.chargeDoneThreshold", "kind": "variable", "doc": "<p></p>\n", "default_value": "32000.0"}, {"fullname": "EV.EV.evChargeRequestWh", "modulename": "EV", "qualname": "EV.evChargeRequestWh", "kind": "variable", "doc": "<p></p>\n", "default_value": "2000.0"}, {"fullname": "EV.EV.pRandomVariation", "modulename": "EV", "qualname": "EV.pRandomVariation", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.3"}, {"fullname": "EV.EV.kmPerWh", "modulename": "EV", "qualname": "EV.kmPerWh", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.0065"}, {"fullname": "EV.EV.evCount", "modulename": "EV", "qualname": "EV.evCount", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "EV.EV.evChargeSteps", "modulename": "EV", "qualname": "EV.evChargeSteps", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "EV.EV.evChargeGap", "modulename": "EV", "qualname": "EV.evChargeGap", "kind": "variable", "doc": "<p></p>\n", "default_value": "0.0"}, {"fullname": "EV.EV.evChargeCount", "modulename": "EV", "qualname": "EV.evChargeCount", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "EV.EV.myID", "modulename": "EV", "qualname": "EV.myID", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myState", "modulename": "EV", "qualname": "EV.myState", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myPosition", "modulename": "EV", "qualname": "EV.myPosition", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myRendezvous", "modulename": "EV", "qualname": "EV.myRendezvous", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myDrone", "modulename": "EV", "qualname": "EV.myDrone", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myColour", "modulename": "EV", "qualname": "EV.myColour", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myChargeCount", "modulename": "EV", "qualname": "EV.myChargeCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myChargeSteps", "modulename": "EV", "qualname": "EV.myChargeSteps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myChaseSteps", "modulename": "EV", "qualname": "EV.myChaseSteps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myCapacity", "modulename": "EV", "qualname": "EV.myCapacity", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myChargeNeededThreshold", "modulename": "EV", "qualname": "EV.myChargeNeededThreshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myevChargeRequestWh", "modulename": "EV", "qualname": "EV.myevChargeRequestWh", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myChargeDone", "modulename": "EV", "qualname": "EV.myChargeDone", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.myLastChargeRequest", "modulename": "EV", "qualname": "EV.myLastChargeRequest", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "EV.EV.allocate", "modulename": "EV", "qualname": "EV.allocate", "kind": "function", "doc": "<p>save the drone/ev relationship and set rendezvous position - may be None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">drone</span>, </span><span class=\"param\"><span class=\"n\">rvPos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EV.EV.captureStats", "modulename": "EV", "qualname": "EV.captureStats", "kind": "function", "doc": "<p>Add statistics for this vehicle into class variables - called when EV leaves</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EV.EV.getID", "modulename": "EV", "qualname": "EV.getID", "kind": "function", "doc": "<p>getter function for EV identity</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EV.EV.getMyKmPerWh", "modulename": "EV", "qualname": "EV.getMyKmPerWh", "kind": "function", "doc": "<p>getter for my average usage</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EV.EV.getMyPosition", "modulename": "EV", "qualname": "EV.getMyPosition", "kind": "function", "doc": "<p>getter function for x, y position</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EV.EV.leftSimulation", "modulename": "EV", "qualname": "EV.leftSimulation", "kind": "function", "doc": "<p>State change</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EV.EV.setEVOverrides", "modulename": "EV", "qualname": "EV.setEVOverrides", "kind": "function", "doc": "<p>check to see if we have an override defined for charge request - could be in type or vehicle definition - vehicle takes precedence</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">myID</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EV.EV.setLastChargeRequest", "modulename": "EV", "qualname": "EV.setLastChargeRequest", "kind": "function", "doc": "<p>Work out how much charge (in Wh) is needed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EV.EV.setMyPosition", "modulename": "EV", "qualname": "EV.setMyPosition", "kind": "function", "doc": "<p>get real EV position from simulation and set my variable</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EV.EV.stopCharging", "modulename": "EV", "qualname": "EV.stopCharging", "kind": "function", "doc": "<p>state change triggered by drone or ev leaving</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">remainingCharge</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "EV.EV.update", "modulename": "EV", "qualname": "EV.update", "kind": "function", "doc": "<p>Implementation of EV state model - called in each simulation step</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone", "modulename": "Drone", "kind": "module", "doc": "<p>Drone module</p>\n"}, {"fullname": "Drone.Drone", "modulename": "Drone", "qualname": "Drone", "kind": "class", "doc": "<p>Drone class - main parameters based on based on Ehang 184 which has top speed of 60km/h, battery capacity of 14.4 KW giving 23 mins flight time</p>\n"}, {"fullname": "Drone.Drone.__init__", "modulename": "Drone", "qualname": "Drone.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pos</span>, </span><span class=\"param\"><span class=\"n\">poi</span>, </span><span class=\"param\"><span class=\"n\">dt</span></span>)</span>"}, {"fullname": "Drone.Drone.DroneState", "modulename": "Drone", "qualname": "Drone.DroneState", "kind": "class", "doc": "<p>Enumeration for Drone state model</p>\n", "bases": "enum.Enum"}, {"fullname": "Drone.Drone.DroneState.PARKED", "modulename": "Drone", "qualname": "Drone.DroneState.PARKED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DroneState.PARKED: 1&gt;"}, {"fullname": "Drone.Drone.DroneState.FLYINGTORENDEZVOUS", "modulename": "Drone", "qualname": "Drone.DroneState.FLYINGTORENDEZVOUS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DroneState.FLYINGTORENDEZVOUS: 2&gt;"}, {"fullname": "Drone.Drone.DroneState.FLYINGTOEV", "modulename": "Drone", "qualname": "Drone.DroneState.FLYINGTOEV", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DroneState.FLYINGTOEV: 3&gt;"}, {"fullname": "Drone.Drone.DroneState.CHARGINGEV", "modulename": "Drone", "qualname": "Drone.DroneState.CHARGINGEV", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DroneState.CHARGINGEV: 4&gt;"}, {"fullname": "Drone.Drone.DroneState.FLYINGTOCHARGE", "modulename": "Drone", "qualname": "Drone.DroneState.FLYINGTOCHARGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DroneState.FLYINGTOCHARGE: 5&gt;"}, {"fullname": "Drone.Drone.DroneState.CHARGINGDRONE", "modulename": "Drone", "qualname": "Drone.DroneState.CHARGINGDRONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DroneState.CHARGINGDRONE: 6&gt;"}, {"fullname": "Drone.Drone.DroneState.FLYINGTOPARK", "modulename": "Drone", "qualname": "Drone.DroneState.FLYINGTOPARK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DroneState.FLYINGTOPARK: 7&gt;"}, {"fullname": "Drone.Drone.DroneState.NULLState", "modulename": "Drone", "qualname": "Drone.DroneState.NULLState", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DroneState.NULLState: 8&gt;"}, {"fullname": "Drone.Drone.droneIDCount", "modulename": "Drone", "qualname": "Drone.droneIDCount", "kind": "variable", "doc": "<p></p>\n", "default_value": "0"}, {"fullname": "Drone.Drone.parkAtHome", "modulename": "Drone", "qualname": "Drone.parkAtHome", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "Drone.Drone.d0Type", "modulename": "Drone", "qualname": "Drone.d0Type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DroneType.DroneType object&gt;"}, {"fullname": "Drone.Drone.dummyEVCreated", "modulename": "Drone", "qualname": "Drone.dummyEVCreated", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "Drone.Drone.myPosition", "modulename": "Drone", "qualname": "Drone.myPosition", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myParkPosition", "modulename": "Drone", "qualname": "Drone.myParkPosition", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myParkEP", "modulename": "Drone", "qualname": "Drone.myParkEP", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myCharge", "modulename": "Drone", "qualname": "Drone.myCharge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myFlyingCharge", "modulename": "Drone", "qualname": "Drone.myFlyingCharge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myViableCharge", "modulename": "Drone", "qualname": "Drone.myViableCharge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myState", "modulename": "Drone", "qualname": "Drone.myState", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myEV", "modulename": "Drone", "qualname": "Drone.myEV", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myFlyingCount", "modulename": "Drone", "qualname": "Drone.myFlyingCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myFullCharges", "modulename": "Drone", "qualname": "Drone.myFullCharges", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myBrokenCharges", "modulename": "Drone", "qualname": "Drone.myBrokenCharges", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myBrokenEVCharges", "modulename": "Drone", "qualname": "Drone.myBrokenEVCharges", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myEVChargingCount", "modulename": "Drone", "qualname": "Drone.myEVChargingCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myChargeMeFlyingCount", "modulename": "Drone", "qualname": "Drone.myChargeMeFlyingCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myChargeMeCount", "modulename": "Drone", "qualname": "Drone.myChargeMeCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myChaseCount", "modulename": "Drone", "qualname": "Drone.myChaseCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myBrokenChaseCount", "modulename": "Drone", "qualname": "Drone.myBrokenChaseCount", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myChaseSteps", "modulename": "Drone", "qualname": "Drone.myChaseSteps", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myRequestedCharge", "modulename": "Drone", "qualname": "Drone.myRequestedCharge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.myDummyEVInserted", "modulename": "Drone", "qualname": "Drone.myDummyEVInserted", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "Drone.Drone.printDroneType", "modulename": "Drone", "qualname": "Drone.printDroneType", "kind": "function", "doc": "<p>helper function to list current droneType values</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.createDummyEV", "modulename": "Drone", "qualname": "Drone.createDummyEV", "kind": "function", "doc": "<p>Create an EV type to use at charging stations whilst drone is charging</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.setDroneType", "modulename": "Drone", "qualname": "Drone.setDroneType", "kind": "function", "doc": "<p>Support different drone definitions - initially to give us a drone that doesn't need charging</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">useOneBattery</span>, </span><span class=\"param\"><span class=\"n\">droneType</span><span class=\"o\">=</span><span class=\"s1\">&#39;ehang184&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.setDroneTypeFromPOI", "modulename": "Drone", "qualname": "Drone.setDroneTypeFromPOI", "kind": "function", "doc": "<p>Update the default DroneType - d0Type , containing drone behavior varuables\n  from a definition in an additional file - if it exists.\nThen if the --z option is set create drones from definitions in the file</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">useOneBattery</span>, </span><span class=\"param\"><span class=\"n\">zeroDrone</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.allocate", "modulename": "Drone", "qualname": "Drone.allocate", "kind": "function", "doc": "<p>allocate this instance to an EV</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ev</span>, </span><span class=\"param\"><span class=\"n\">requestedCharge</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.chargeMe", "modulename": "Drone", "qualname": "Drone.chargeMe", "kind": "function", "doc": "<p>Drone at hub - charge if needed</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.dummyEVHide", "modulename": "Drone", "qualname": "Drone.dummyEVHide", "kind": "function", "doc": "<p>remove the dummy EVs   - we need to resume before remove to avoid the aborted stop warning However\ninsertion may have collided and teleported/removed the EV so we need to check the list maintained by simulation before we try</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.dummyEVInsert", "modulename": "Drone", "qualname": "Drone.dummyEVInsert", "kind": "function", "doc": "<p>If we are generating charge station output add dummy EVs to the charge station for the drone batteries - whilst the drone is there</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.fly", "modulename": "Drone", "qualname": "Drone.fly", "kind": "function", "doc": "<p>move the drone along a straight line to pos by the amount Drone can move in a timeStep,\nreturns True if we've arrived at pos, False otherwise</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.getID", "modulename": "Drone", "qualname": "Drone.getID", "kind": "function", "doc": "<p>getter for Drone SUMO ID</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.getIDCount", "modulename": "Drone", "qualname": "Drone.getIDCount", "kind": "function", "doc": "<p>getter for idcount!</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.getMyPosition", "modulename": "Drone", "qualname": "Drone.getMyPosition", "kind": "function", "doc": "<p>getter for position</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.logLine", "modulename": "Drone", "qualname": "Drone.logLine", "kind": "function", "doc": "<p>Output discrete changes in charge levels for this drone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">activity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.notifyChase", "modulename": "Drone", "qualname": "Drone.notifyChase", "kind": "function", "doc": "<p>from EV updating chases by this drone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">chaseOK</span>, </span><span class=\"param\"><span class=\"n\">chaseSteps</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.notifyEVFinished", "modulename": "Drone", "qualname": "Drone.notifyEVFinished", "kind": "function", "doc": "<p>EV tells us that it is charged or has left simulation so free self up</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">evState</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.park", "modulename": "Drone", "qualname": "Drone.park", "kind": "function", "doc": "<p>charge finished so park drone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.parkingUpdate", "modulename": "Drone", "qualname": "Drone.parkingUpdate", "kind": "function", "doc": "<p>secondary update - invoked when Control centre is managing drone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.setMyParkPosition", "modulename": "Drone", "qualname": "Drone.setMyParkPosition", "kind": "function", "doc": "<p>configure my parking/charging position</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.setViableCharge", "modulename": "Drone", "qualname": "Drone.setViableCharge", "kind": "function", "doc": "<p>Check charge levels and see if we are viable - ie can be allocated</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.update", "modulename": "Drone", "qualname": "Drone.update", "kind": "function", "doc": "<p>primary update - invoked directly when EV is managing drone</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.usePower", "modulename": "Drone", "qualname": "Drone.usePower", "kind": "function", "doc": "<p>Am flying or charging an EV so adjust my charge levels</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mode</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "Drone.Drone.viable", "modulename": "Drone", "qualname": "Drone.viable", "kind": "function", "doc": "<p>helper function to check whether we are able to be diverted</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ChargeHubs", "modulename": "ChargeHubs", "kind": "module", "doc": "<p>Methods mapping charge hubs - initialised on startup then read only</p>\n"}, {"fullname": "ChargeHubs.ChargeHubs", "modulename": "ChargeHubs", "qualname": "ChargeHubs", "kind": "class", "doc": "<p>Static Class capturing the charge hub locations and functions to find the nearest hub</p>\n"}, {"fullname": "ChargeHubs.ChargeHubs.chargeHubLocations", "modulename": "ChargeHubs", "qualname": "ChargeHubs.chargeHubLocations", "kind": "variable", "doc": "<p></p>\n", "default_value": "{}"}, {"fullname": "ChargeHubs.ChargeHubs.findNearestHub", "modulename": "ChargeHubs", "qualname": "ChargeHubs.findNearestHub", "kind": "function", "doc": "<p>find the nearest hub, as the crow flies, to a point (ev or drone location)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">px</span>, </span><span class=\"param\"><span class=\"n\">py</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ChargeHubs.ChargeHubs.findNearestHubDriving", "modulename": "ChargeHubs", "qualname": "ChargeHubs.findNearestHubDriving", "kind": "function", "doc": "<p>find the nearest hub reachable by the ev, (driving distance)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">evID</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ChargeHubs.ChargeHubs.locateChargeHubs", "modulename": "ChargeHubs", "qualname": "ChargeHubs.locateChargeHubs", "kind": "function", "doc": "<p>save the positions of all the hubs</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "ChargeHubs.ChargeHubs.nearestHubLocation", "modulename": "ChargeHubs", "qualname": "ChargeHubs.nearestHubLocation", "kind": "function", "doc": "<p>Helper function</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pos</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "GlobalClasses", "modulename": "GlobalClasses", "kind": "module", "doc": "<p>Static class to support inter-object communication</p>\n"}, {"fullname": "GlobalClasses.GlobalClasses", "modulename": "GlobalClasses", "qualname": "GlobalClasses", "kind": "class", "doc": "<p>globals to support communication between Drones, EVs with control centre and simulation</p>\n"}, {"fullname": "GlobalClasses.GlobalClasses.__init__", "modulename": "GlobalClasses", "qualname": "GlobalClasses.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cc</span>, </span><span class=\"param\"><span class=\"n\">ss</span>, </span><span class=\"param\"><span class=\"n\">ch</span></span>)</span>"}, {"fullname": "GlobalClasses.GlobalClasses.cc", "modulename": "GlobalClasses", "qualname": "GlobalClasses.cc", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "GlobalClasses.GlobalClasses.ss", "modulename": "GlobalClasses", "qualname": "GlobalClasses.ss", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "GlobalClasses.GlobalClasses.ch", "modulename": "GlobalClasses", "qualname": "GlobalClasses.ch", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "GlobalClasses.GlobalClasses.modelRendezvous", "modulename": "GlobalClasses", "qualname": "GlobalClasses.modelRendezvous", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "GlobalClasses.GlobalClasses.onlyChargeOnce", "modulename": "GlobalClasses", "qualname": "GlobalClasses.onlyChargeOnce", "kind": "variable", "doc": "<p></p>\n", "default_value": "True"}, {"fullname": "GlobalClasses.GlobalClasses.chargePrint", "modulename": "GlobalClasses", "qualname": "GlobalClasses.chargePrint", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "GlobalClasses.GlobalClasses.chargeLog", "modulename": "GlobalClasses", "qualname": "GlobalClasses.chargeLog", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "GlobalClasses.GlobalClasses.dronePrint", "modulename": "GlobalClasses", "qualname": "GlobalClasses.dronePrint", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "GlobalClasses.GlobalClasses.droneLog", "modulename": "GlobalClasses", "qualname": "GlobalClasses.droneLog", "kind": "variable", "doc": "<p></p>\n", "default_value": "None"}, {"fullname": "GlobalClasses.GlobalClasses.droneKmPerHr", "modulename": "GlobalClasses", "qualname": "GlobalClasses.droneKmPerHr", "kind": "variable", "doc": "<p></p>\n", "default_value": "60.0"}, {"fullname": "GlobalClasses.GlobalClasses.useRandom", "modulename": "GlobalClasses", "qualname": "GlobalClasses.useRandom", "kind": "variable", "doc": "<p></p>\n", "default_value": "False"}, {"fullname": "GlobalClasses.GlobalClasses.getDroneSpeed", "modulename": "GlobalClasses", "qualname": "GlobalClasses.getDroneSpeed", "kind": "function", "doc": "<p>getter for droneKmPerHr</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "GlobalClasses.GlobalClasses.getRandom", "modulename": "GlobalClasses", "qualname": "GlobalClasses.getRandom", "kind": "function", "doc": "<p>return a random no!</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "GlobalClasses.GlobalClasses.setGlobals", "modulename": "GlobalClasses", "qualname": "GlobalClasses.setGlobals", "kind": "function", "doc": "<p>initialise globals used across drone,ev,controlcentre</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">droneKmPerHr</span>,</span><span class=\"param\">\t<span class=\"n\">randomSeed</span>,</span><span class=\"param\">\t<span class=\"n\">droneLog</span>,</span><span class=\"param\">\t<span class=\"n\">chargeLog</span>,</span><span class=\"param\">\t<span class=\"n\">onlyChargeOnce</span>,</span><span class=\"param\">\t<span class=\"n\">modelRendezvous</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "GlobalClasses.GlobalClasses.usingRandom", "modulename": "GlobalClasses", "qualname": "GlobalClasses.usingRandom", "kind": "function", "doc": "<p>returns True if we are using random nos, False otherwise</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "DroneType", "modulename": "DroneType", "kind": "module", "doc": "<p>DroneType class</p>\n"}, {"fullname": "DroneType.DroneType", "modulename": "DroneType", "qualname": "DroneType", "kind": "class", "doc": "<p>Drone parameters</p>\n"}, {"fullname": "DroneType.DroneType.droneKMperh", "modulename": "DroneType", "qualname": "DroneType.droneKMperh", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.droneChargeWh", "modulename": "DroneType", "qualname": "DroneType.droneChargeWh", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.droneFlyingWh", "modulename": "DroneType", "qualname": "DroneType.droneFlyingWh", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.droneFlyingWhperTimeStep", "modulename": "DroneType", "qualname": "DroneType.droneFlyingWhperTimeStep", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.droneChargeContingencyp", "modulename": "DroneType", "qualname": "DroneType.droneChargeContingencyp", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.droneChargeViablep", "modulename": "DroneType", "qualname": "DroneType.droneChargeViablep", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.WhEVChargeRatePerTimeStep", "modulename": "DroneType", "qualname": "DroneType.WhEVChargeRatePerTimeStep", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.WhDroneRechargePerTimeStep", "modulename": "DroneType", "qualname": "DroneType.WhDroneRechargePerTimeStep", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.droneImageFile", "modulename": "DroneType", "qualname": "DroneType.droneImageFile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.droneColour", "modulename": "DroneType", "qualname": "DroneType.droneColour", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.droneWidth", "modulename": "DroneType", "qualname": "DroneType.droneWidth", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.droneHeight", "modulename": "DroneType", "qualname": "DroneType.droneHeight", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.useOneBattery", "modulename": "DroneType", "qualname": "DroneType.useOneBattery", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.droneMperSec", "modulename": "DroneType", "qualname": "DroneType.droneMperSec", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.droneStepMperTimeStep", "modulename": "DroneType", "qualname": "DroneType.droneStepMperTimeStep", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.droneStepM2", "modulename": "DroneType", "qualname": "DroneType.droneStepM2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.minDroneCharge", "modulename": "DroneType", "qualname": "DroneType.minDroneCharge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.minDroneFlyingWh", "modulename": "DroneType", "qualname": "DroneType.minDroneFlyingWh", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.viableDroneCharge", "modulename": "DroneType", "qualname": "DroneType.viableDroneCharge", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.viableDroneFlyingWh", "modulename": "DroneType", "qualname": "DroneType.viableDroneFlyingWh", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "DroneType.DroneType.setDerived", "modulename": "DroneType", "qualname": "DroneType.setDerived", "kind": "function", "doc": "<p>Adjust the derived variables for simulation step duration</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stepSecs</span><span class=\"o\">=</span><span class=\"mf\">1.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();